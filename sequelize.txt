SEQUELIZE

//ORM 
Abstração de banco de dados. 
tabelas viram modulos. 

//Manipulação dos dados. 
sem SQL
apenas código javascript

//MIGRATIONS
controle de versão para base de dados;
cada arquivo contém instruções para criação, alteração ou remoção de tabelas ou colunas;
mantém a base atualizada entre todos desenvolvedores do time e também no ambiente de produção. 

cada arquivo é uma migration e sua ordenação ocorre por data.

é possivel desfazer uma migração enquanto estivermos desenvolvendo a feature

Deposi que a migration foi enviada para outros devs ou para ambiente de produção ela JAMAIS poderá ser alterada. Uma nova deve ser criada; 

Cada migration deve realizar alterações em apenas uma tabela, você pode criar várias migration para alterações maiores. 

//SEEDS

população da base de dados para desenvolvimento; 
muito utlizado para popular dados para testes;
executável apenas por código;
jamais será utilizado em produção;
caso sejam dados que precisam ir para produção a própria migration pode manipular dados das tabelas;

//ARQUITETURA MVC
model
O model armazena a abstração do banco, utlizado para manipular os dados contidos nas tabelas do banco. 
Não possuem responsabilidade sobre a regra de negócio da nossa aplicação. 


controller
O controller é o ponto de entrada da nossa aplicação, uma rota geralmente está associada diretamente com um método do controller. Podemos incluir a frande parte das regras de negócio diretamente com um método do controller. Podemos incluir a grande parte das regras de negócio da aplicação nos controllers (conforme a aplicação cresce podemos isolar as regras.)

#classes
#sempre retorna um JSON;
#Não chama outro controller/método; 
  get, , put, create, 

 
view
A view é o retorno ao cliente, em aplicações que não utilizando o modelo de API REST isso pode ser um html, mas no nosso caso isso é apenas nosso JSON que será retornado ao front-end e depois manipulado pelo ReactJS ou React Native. 



 